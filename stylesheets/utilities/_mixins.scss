// ========= MIXINS =========
// -------------------------------------------------------------- */

// === Positioning ===
//----------------------------------------------------------------------------
// Cover or Center Everything

// Source: http://codepen.io/chriscoyier/blog/some-mini-sass-mixins-i-like
//----------------------------------------------------------------------------
@mixin coverer {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

@mixin centerer {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}


// === Text ===
//------------------
// Truncate Text
//------------------
@mixin text-truncate($width:100%) {
    width: $width;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

//------------------
// Word Wrapping
//------------------
@mixin word-wrap {
    overflow-wrap: break-word;
    word-wrap: break-word;
}


// === Gradients ===
//--------------------
// Linear Gradient
//--------------------
@mixin linear-gradient($from, $to) {
    background-color: $to; /* Fallback for sad browsers */
    background-image: linear-gradient($from, $to);
}


// === Embedded Content ===
//----------------------------
// Flexible iframes/videos
//----------------------------
@mixin flex-frames {
    height: 0;
    padding-top: 30px;
    padding-bottom: 56.25%;
    position: relative;
    overflow: hidden;

    iframe {
        width: 100%;
        height: 100%;
        position: absolute;
        top: 0; left: 0;
    }
}


// === REM Calculations ===
//-----------------------------------------------------------------------------
// Similar to rem-calc function but will return rem unit with a px fallback
// Source:
//      https://css-tricks.com/snippets/css/less-mixin-for-rem-font-sizing/
//      http://joshbroton.com/quick-fix-sass-mixins-for-rem-values-with-px-fallback/
//-----------------------------------------------------------------------------
@mixin px-rem($property, $values...) {
	$max: length($values);
	$pxValues: '';
	$remValues: '';

	@for $i from 1 through $max {
		$value: strip-unit(nth($values, $i));

		@if $value != 0 {
			$pxValues: #{$pxValues + $value}px;
			$remValues: #{$remValues + $value / 16}rem;
		} @else {
			$pxValues: #{$pxValues + $value};
			$remValues: #{$remValues + $value / 16};
		}

		@if $i < $max {
			$pxValues: #{$pxValues + " "};
			$remValues: #{$remValues + " "};
		}
	}

	#{$property}: $pxValues;
	#{$property}: $remValues;
}


// === RWD Helpers ===
//--------------------------------------------------------------
// Media Query Breakpoints
//
// NOTE: The breakpoint values will need to be adjusted on a
//       per-project bases, based on content.
//--------------------------------------------------------------
@mixin breakpoint($point) {
    @if $point == large {
        // Minimum width of 960/16 pixels = 60em.
        @media (min-width: 60em) { @content; }
    }
    @else if $point == medium-large {
        // Minimum width of 850/16 pixels = 53.125em.
        @media (min-width: 53.125em) { @content; }
    }
    @else if $point == medium {
        // Minimum width of 760/16 pixels = 47.5em.
        @media (min-width: 47.5em) { @content; }
    }
    @else if $point == small {
        // Minimum width of 600/16 pixels = 37.5em.
        @media (min-width: 37.5em)  { @content; }
    }
    @else {
        @media (min-width: $point) { @content; }
    }
}

//---------------------------------------------------------------------------------------------------------------
// HiDPI Background Images
//
// Source: http://www.abookapart.com/products/sass-for-web-designers (page 80)
// NOTE: Image path in URL defined in Variables partial.
// NOTE: The '&' placeholder in the book example is not needed to get the main selector from within the MQ - will also work without.
//---------------------------------------------------------------------------------------------------------------
@mixin retina-bg($file, $type, $width, $height) {
    background-image: url($img-path + $file + '.' + $type);

    @media #{$is-hdpi} {
		background-image: url($img-path + $file + '-2x.' + $type);
		background-size: $width $height;
    }
}

//----------------------------------------------------------
// SVG Background
//
// NOTE: Image path in URL defined in Variables partial.
//----------------------------------------------------------
@mixin svg-bg($file, $width, $height) {
    // background: transparent url($img-path + $file + '.png') center no-repeat; /* Uncomment if IE8 support needed */
    background: transparent url($img-path + $file + '.svg') center no-repeat;
    background-size: $width $height;
}

//--------------------------------------------------------------------------------------
// SVG Sprite Background
//
// NOTE: Image path in URL defined in Variables partial.
//       SVG size for background-size declaration also defined in Variables partial.
//--------------------------------------------------------------------------------------
@mixin svg-sprite($file, $x-pos, $y-pos) {
    // background: transparent url($img-path + $file + '.png') $x-pos $y-pos no-repeat; /* Uncomment if IE8 support needed */
    background: transparent url($img-path + $file + '.svg') $x-pos $y-pos no-repeat;
    background-size: $sprite-size;
}


// === Helper Classes ===
//------------------------------------------------------
// Hide visually and from screen readers: h5bp.com/u
//------------------------------------------------------
@mixin hidden {
    display: none !important;
    visibility: hidden;
}

//-----------------------------------------------------------------------------
// Hide only visually, but have it available for screen readers: h5bp.com/v
//-----------------------------------------------------------------------------
@mixin visuallyhidden {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;

}

//---------------------------------------------------------------------------
// Extends the .visuallyhidden class to allow the element to be focusable
// when navigated to via the keyboard: h5bp.com/p
//---------------------------------------------------------------------------
@mixin focusable {
    @include visuallyhidden;

    &:active,
    &:focus {
        clip: auto;
        height: auto;
        margin: 0;
        overflow: visible;
        position: static;
        width: auto;
    }
}

//---------------------------------------------------------------
// Hide visually and from screen readers, but maintain layout
//---------------------------------------------------------------
@mixin invisible {
    visibility: hidden;
}

//------------------------------------------------------------------------------
// Clearfix: contain floats
//
// For modern browsers
// 1. The space content is one way to avoid an Opera bug when the
//    `contenteditable` attribute is included anywhere else in the document.
//    Otherwise it causes space to appear at the top and bottom of elements
//    that receive the `clearfix` class.
// 2. The use of `table` rather than `block` is only necessary if using
//    `:before` to contain the top-margins of child elements.
//------------------------------------------------------------------------------
@mixin clearfix {
    &:after {
        clear: both;
        content: " ";
        display: block;
    }
}
