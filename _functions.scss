/* =FUNCTIONS
-------------------------------------------------------------- */
/*===== REM Calculations =====*/
/**
 * Strips the unit of measure and returns it
 * (http://foundation.zurb.com/docs/components/sass.html)
 */
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

/**
 * New Syntax, allows to optionally calculate on a different base value to counter compounding effect of em\'s.
 * Call with 1, 2, 3 or 4 parameters, \'px\' is not required but supported
 * rem-calc(10 20 30px 40);
 * Space delimited, if you want to delimit using comma\'s, wrap it in another pair of brackets
 * rem-calc((10, 20, 30, 40px));
 * Optionally call with a different base (eg: 8px) to calculate em.
 * rem-calc(16px 32px 48px, 8px);
 * If you require to comma separate your list
 * rem-calc((16px, 32px, 48), 8px);
 * (http://foundation.zurb.com/docs/components/sass.html)
 * NOTE: If you'd rather have a pixel fallback for IE8 support, consider using rem-calc
 *       in a Mixin that returns a duplicate declaration, as
 *       seen here - http://css-tricks.com/snippets/css/less-mixin-for-rem-font-sizing/
 */
@function convert-to-rem($value, $base-value: $rem-base)  {
  $value: strip-unit($value) / strip-unit($base-value) * 1em;
  @if ($value == 0em) { $value: 0; } // Turn 0em into 0
  @return $value;
}

@function rem-calc($values, $base-value: $rem-base) {
  $max: length($values);

  @if $max == 1 { @return convert-to-rem(nth($values, 1), $base-value); }

  $remValues: ();
  @for $i from 1 through $max {
    $remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
  }
  @return $remValues;
}
