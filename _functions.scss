/* =FUNCTIONS
-------------------------------------------------------------- */
/*===== Colors =====*/
/**
 * Various Shades of Black & White
 * Source: http://codepen.io/chriscoyier/blog/some-mini-sass-mixins-i-like
 */
@function black($opacity) {
    @return rgba(black, $opacity);
}
@function white($opacity) {
    @return rgba(white, $opacity);
}


/*===== REM Calculations =====*/
/**
 * Strips the unit of measure and returns it
 * Source: http://foundation.zurb.com/docs/components/sass.html
 */
@function strip-unit($num) {
    @return $num / ($num * 0 + 1);
}

/**
 * Allows to optionally calculate on a different base value to counter compounding effect of em\'s.
 * Call with 1, 2, 3 or 4 parameters, \'px\' is not required but supported
 * em-calc(10 20 30px 40);
 * Space delimited, if you want to delimit using comma\'s, wrap it in another pair of brackets
 * em-calc((10, 20, 30, 40px));
 * Optionally call with a different base (eg: 8px) to calculate em.
 * em-calc(16px 32px 48px, 8px);
 * If you require to comma separate your list
 * em-calc((16px, 32px, 48), 8px);
 * Source: http://foundation.zurb.com/docs/components/sass.html
 * NOTE: If you'd rather output rem units with a pixel fallback for IE8 support,
 *       see rem-calc Mixin in _mixins.scss
 */
@function convert-rem-to-em($value, $base-value: $rem-base)  {
    $value: strip-unit($value) / strip-unit($base-value) * 1em;
    @if ($value == 0em) { $value: 0; } // Turn 0em into 0
    @return $value;
}

@function em-calc($values, $base-value: $rem-base) {
    $max: length($values);

    @if $max == 1 { @return convert-rem-to-em(nth($values, 1), $base-value); }

    $remValues: ();
    @for $i from 1 through $max {
        $remValues: append($remValues, convert-rem-to-em(nth($values, $i), $base-value));
    }
    @return $remValues;
}
