// ========= FUNCTIONS =========
// -------------------------------------------------------------- */

// === Colors ===
//---------------------------------------------------------------------------
// Various Shades of Black & White
// Source: http://codepen.io/chriscoyier/blog/some-mini-sass-mixins-i-like
//---------------------------------------------------------------------------
@function black($opacity) {
    @return rgba(black, $opacity);
}
@function white($opacity) {
    @return rgba(white, $opacity);
}


// === REM Calculations ===
//----------------------------------------------------------------------
// Strips the unit of measure and returns it
// Source: http://foundation.zurb.com/docs/components/sass.html
//----------------------------------------------------------------------
@function strip-unit($num) {
    @return $num / ($num * 0 + 1);
}

//-----------------------------------------------------------------------------------------------------
// Allows to optionally calculate on a different base value to counter compounding effect of em\'s.
// Call with 1, 2, 3 or 4 parameters, \'px\' is not required but supported
// rem-calc(10 20 30px 40);
// Space delimited, if you want to delimit using comma\'s, wrap it in another pair of brackets
// rem-calc((10, 20, 30, 40px));
// Optionally call with a different base (eg: 8px) to calculate rem.
// rem-calc(16px 32px 48px, 8px);
// If you require to comma separate your list
// rem-calc((16px, 32px, 48), 8px);
// Source: http://foundation.zurb.com/docs/components/sass.html
// NOTE: Similar to Foundation's method but here we are simply outputting rem units based
//       on the pixel values given. Also see - https://github.com/whatsnewsaes/Skeleton-Sass/issues/18#issue-63764646. $rem-base variable is defined in _variables.scss.
//-----------------------------------------------------------------------------------------------------
@function convert-to-rem($value, $base-value: $rem-base)  {
    $value: strip-unit($value) / strip-unit($base-value) * 1rem;
    @if ($value == 0rem) { $value: 0; } // Turn 0rem into 0
    @return $value;
}

@function rem-calc($values, $base-value: $rem-base) {
    $max: length($values);

    @if $max == 1 { @return convert-to-rem(nth($values, 1), $base-value); }

    $remValues: ();
    @for $i from 1 through $max {
        $remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
    }
    @return $remValues;
}